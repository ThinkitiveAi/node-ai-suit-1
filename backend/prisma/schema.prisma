// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models

model Role {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(50)
  type       String      @default("STAFF") @db.VarChar(20) // STAFF, CLINICIAN
  providers  Provider[]
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@map("roles")
}

model Patient {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(100)
  name      String    @db.VarChar(100)
  password  String    @db.VarChar(100)
  phone     String?   @db.VarChar(20)
  address   String?   @db.VarChar(200)
  assignedProviderId Int? @map("assigned_provider_id")
  assignedProvider   Provider? @relation("PatientProvider", fields: [assignedProviderId], references: [id])
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([email])
  @@index([assignedProviderId])
  @@map("patients")
}

model Provider {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(100)
  name      String    @db.VarChar(100)
  password  String    @db.VarChar(100)
  phone     String?   @db.VarChar(20)
  specialty String    @db.VarChar(100)
  city      String    @db.VarChar(100)
  state     String    @db.VarChar(50)
  roleId    Int       @map("role_id")
  role      Role      @relation(fields: [roleId], references: [id])
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  patients  Patient[] @relation("PatientProvider")
  availabilities Availability[]

  @@index([email])
  @@index([specialty])
  @@index([city])
  @@index([roleId])
  @@map("providers")
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  address   String    @db.VarChar(200)
  city      String    @db.VarChar(100)
  state     String    @db.VarChar(50)
  zipCode   String    @db.VarChar(10) @map("zip_code")
  phone     String?   @db.VarChar(20)
  isActive  Boolean   @default(true) @map("is_active")
  archived  Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  availabilities Availability[]

  @@index([city])
  @@index([isActive])
  @@map("locations")
}

model Availability {
  id              Int             @id @default(autoincrement())
  providerId      Int             @map("provider_id")
  provider        Provider        @relation(fields: [providerId], references: [id])
  locationId      Int?            @map("location_id")
  location        Location?       @relation(fields: [locationId], references: [id])
  availabilityType String         @db.VarChar(20) @map("availability_type")
  dayOfWeek       String          @db.VarChar(20) @map("day_of_week")
  startTime       String          @db.VarChar(5) @map("start_time")
  endTime         String          @db.VarChar(5) @map("end_time")
  repeatType      String          @default("NONE") @db.VarChar(20) @map("repeat_type")
  isActive        Boolean         @default(true) @map("is_active")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  @@index([providerId])
  @@index([locationId])
  @@index([dayOfWeek])
  @@index([isActive])
  @@map("availabilities")
}
